#TODO: Rename this file, name can be confusing
import re
from collections import deque

class Patch(object):
    """Base class for Patch

    Attributes:
        patch_link: Self explanatory
        source_version: The source version the patch pertains to
        reaching_path: The path taken by the finder to find the patch
    """

    def __init__(self, context, patch_link, source_version=None):
        self.patch_link = patch_link
        self.source_version = source_version
        self.reaching_path = context.current_path


#thoughts on this?
class Context(object):
    """Base Class for the runtime context of the patch finder

    Attributes:
        vulnerability: The current Vulnerability object
        current_path: A linked list of the current path the finder is on
    """

    def __init__(self, vulnerability, recursion_limit=0):
        self.vulnerability = vulnerability
        self.current_path = deque([])
        self.recursion_limit = recursion_limit if (recursion_limit > 0) else 0

    def add_to_path(self, url):
        self.current_path.append(url)

    def pop_path_left(self):
        if not self.current_path:
            raise IndexError('finder in root of path, can\'t pop from path')
        self.current_path.popleft()

    def pop_path_right(self):
        if not self.current_path:
            raise IndexError('finder in root of path, can\'t pop from path')
        self.current_path.pop()



class Vulnerability(object):
    """Base class for vulnerabilities

    Attributes:
        vulnerability_id: Self explanatory
        patches: List of patches relevant to the vulnerability
        packages: List of packages the vulnerability affects
    """

    def __init__(self, vulnerability_id, packages=None):
        self.vulnerability_id = vulnerability_id
        self.patches = []
        self.packages = packages

    def add_patch(self, context, patch_link, source_version=None):
        patch = Patch(context, patch_link, source_version)
        self.patches.append(patch)

    def entrypoint_URLs(self):
        for entrypoint in self.entrypoints:
            yield entrypoint % self.vulnerability_id


class CVE(Vulnerability):
    """Subclass for CVE"""

    def __init__(self, vulnerability_id, packages=None):
        super(CVE, self).__init__(vulnerability_id, packages)
        self.entrypoints = ['https://nvd.nist.gov/vuln/detail/%s',
                            'https://cve.mitre.org/cgi-bin/cvename.cgi?name=%s']

def create_vulnerability(vulnerability_id, packages=None):
    if re.match(r'^CVE\-\d+\-\d+$', vulnerability_id, re.I):
        return CVE(vulnerability_id, packages)
    return None


def create_context(vulnerability_id, packages=None):
    vulnerability = create_vulnerability(vulnerability_id, packages)
    if vulnerability:
        context = Context(vulnerability)
        return context
    return None

