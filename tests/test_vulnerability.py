from collections import deque
import unittest
import patchfinder.context as context

class TestVulnerability(unittest.TestCase):
    """Test Class for Vulnerability"""

    def test_cve_init(self):
        vuln = context.CVE('CVE-2019-11007')
        self.assertEqual(vuln.vuln_id, 'CVE-2019-11007')
        vuln = context.CVE('cve-2019-1010', {'upstream': ['graphicsmagick', \
                                                          'Imagemagick']})
        self.assertEqual(vuln.packages, {'upstream': ['graphicsmagick', \
                                                      'Imagemagick']})

    def test_create_vuln(self):
        vuln = context.create_vuln('CVE-2018-20406', ['python'])
        self.assertEqual(vuln.vuln_id, 'CVE-2018-20406')
        self.assertEqual(vuln.packages, ['python'])
        vuln = context.create_vuln('TALOS-2018-20406', ['python'])
        self.assertEqual(vuln, None)

    def test_create_context(self):
        ctx = context.create_context('CVE-2018-20406', ['python'])
        self.assertEqual(ctx.current_path, deque([]))

    def test_context(self):
        ctx = context.create_context('CVE-2018-20406', ['python'])
        ctx.add_to_path('url_1')
        ctx.add_to_path('url_2')
        ctx.pop_path_right()
        ctx.vuln.add_patch(ctx, 'patch-url')
        patch = ctx.vuln.patches[0]
        self.assertEqual(patch.reaching_path, deque(['url_1']))


if __name__ == '__main__':
    unittest.main()
