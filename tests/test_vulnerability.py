from collections import deque
import unittest
import patchfinder.vulnerability as vulnerability

class TestVulnerability(unittest.TestCase):
    """Test Class for Vulnerability"""

    def test_cve_init(self):
        vuln = vulnerability.CVE('CVE-2019-11007')
        self.assertEqual(vuln.vulnerability_id, 'CVE-2019-11007')
        vuln = vulnerability.CVE('cve-2019-1010', ['graphicsmagick', 'Imagemagick'])
        self.assertEqual(vuln.packages, ['graphicsmagick', 'Imagemagick'])

    def test_create_vuln(self):
        vuln = vulnerability.create_vulnerability('CVE-2018-20406', ['python'])
        self.assertEqual(vuln.vulnerability_id, 'CVE-2018-20406')
        self.assertEqual(vuln.packages, ['python'])
        vuln = vulnerability.create_vulnerability('TALOS-2018-20406', ['python'])
        self.assertEqual(vuln, None)

    def test_create_context(self):
        context = vulnerability.create_context('CVE-2018-20406', ['python'])
        self.assertEqual(context.current_path, deque([]))

    def test_context(self):
        context = vulnerability.create_context('CVE-2018-20406', ['python'])
        context.add_to_path('url_1')
        context.add_to_path('url_2')
        context.pop_path_right()
        context.vulnerability.add_patch(context, 'patch-url')
        patch = context.vulnerability.patches[0]
        self.assertEqual(patch.reaching_path, deque(['url_1']))


if __name__ == '__main__':
    unittest.main()
